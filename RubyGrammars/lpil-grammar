#!/usr/bin/env ruby

require "ruby_grammar_builder"
require_relative "lib/patterns"

lpilG = Grammar.new(
  name: "LPiL",
  scope_name: "source.lpil",
  fileTypes: [ "tex" ],
  version: "0.0.1",
  information_for_contributors: [
    "This json file was auto generated by a much-more-readable ruby file",
    "(e.g. don't edit it directly)",
  ],
)

lpilG[:subfile] = Pattern.new(
  match: oneOf([ /\\input/, /\\include/ ]),
  tag_as: "keyword.control.subfile"
)

lpilG[:newcodetype] = Pattern.new(
  match: 
    Pattern.new(/\\newCodeType/)
    .then(GPatterns::SimpleArg)
    .then(GPatterns::SimpleArg),
  tag_as: "keyword.control.newcodetype"
)

lpilG[:lpilcode] = PatternRange.new(
  tag_as: "source.lpilcode",
  start_pattern: Pattern.new(
    match:
      Pattern.new(/\\begin\{lpil:/)
      .then(
        match: /\w/,
        tag_as: "keyword.control.source.type",
        reference: "codeType"
      )
      .then(/\}/)
      .then(GPatterns::SimpleArg)
      .then(/\W/),
    tag_as: "keyword.control.source.start"
  ),
  end_pattern: Pattern.new(
    match:
      Pattern.new(/\\end\{lpil:/)
      .matchResultOf("codeType")
      .then(/\}/)
      .then(/\W/),
    tag_as: "keyword.control.source.stop"
  )
)

lpilG[:lpilbuild] = PatternRange.new(
  start_pattern: Pattern.new(
    match: 
    Pattern.new(/\\begin\{lpilBuild\}/)
    .then(GPatterns::SimpleArg)
    .then(GPatterns::SimpleArg)
    .then(/\W/),
    tag_as: "keyword.control.builddescription.start"
  ),
  end_pattern: Pattern.new(
    match: /\\end\{lpilBuild\}\W/,
    tag_as: "keyword.control.builddescription.stop"
  ),
  tag_as: "keyword.control.builddescription",
  tag_content_as: "meta.control.builddescription",
  includes: [
    :lpilrequires,
    :lpilcreates,
    "source.lpil".to_sym
  ]
)

lpilG[:lpilrequires] = Pattern.new(
  match:
    Pattern.new(/\\lpilRequires/)
    .then(GPatterns::SimpleArg)
    .then(GPatterns::SimpleArg)
    .then(/\W/),
  tag_as: "keyword.control.requires"
)

lpilG[:lpilcreates] = Pattern.new(
  match:
    Pattern.new(/\\lpilCreates/)
    .then(GPatterns::SimpleArg)
    .then(GPatterns::SimpleArg)
    .then(/\W/),
  tag_as: "keyword.control.creates"
)

lpilG[:$initial_context] = [
  :subfile,
  :newcodetype,
  :lpilcode,
  :lpilbuild,
  :lpilRequires,
  :lpilCreates,
]

lpilG.save_to(
    syntax_name: "lpil",
    syntax_dir: "../lpil/syntaxes",
    tag_dir: "../lpil/syntaxes",
)
